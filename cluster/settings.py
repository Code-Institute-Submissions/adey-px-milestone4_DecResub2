"""
Django settings for cluster project.

Generated by 'django-admin startproject' using Django 3.2.8. SEE VERSION INFO 

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
# VERSION INFO
# ORIGINALLY INSTALLED WITH 3.2.8
# CURRENT DJANGO VERSION IS 3.0.1

import os
from pathlib import Path
import dj_database_url


# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/


# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', 'xyz')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# Add localhost so gitpod runserver command will also work
ALLOWED_HOSTS = ['dj-cluster-music.herokuapp.com', 'localhost']

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',  # From this line copied from allauth site page
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'home',
    'music',
    'profiles',
    'checkout',
    'public',

    # other
    'crispy_forms',
    'storages',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'cluster.urls'

CRISPY_TEMPLATE_PACK = 'bootstrap4'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'templates'),  # These 2 lines add both templates dir & allauth dir
            os.path.join(BASE_DIR, 'templates', 'allauth'),
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.media',
                'music.context.project_context',  # Return project_context in music/context.py directly
            ],                                 # making its variables available in all pages without using their views
            'builtins': [
                'crispy_forms.templatetags.crispy_forms_tags',
                'crispy_forms.templatetags.crispy_forms_field',
            ]
        },
    },
]

# Note this is not required due to a default existing, but required for gitpod
MESSAGE_STORAGE = 'django.contrib.messages.storage.session.SessionStorage'

AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',

    # `allauth` specific authentication methods, such as login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend',
]

SITE_ID = 1


# For sending confirmation email links to new accounts - See bottom
# EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'


# Additional settings for allauth to work
ACCOUNT_AUTHENTICATION_METHOD = 'username_email'
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_EMAIL_VERIFICATION = 'mandatory'
AACOUNT_SIGNUP_EMAIL_ENTER_TWICE = True
ACCOUNT_USERNAME_MIN_LENGHT = 4
LOGIN_URL = '/accounts/login'  # Specify login url
LOGIN_REDIRECT_URL = '/'  # Redirect to site homepage after login

WSGI_APPLICATION = 'cluster.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

# If heroku DB_URL is set in local env var in gitpod, connect to postgres,
# otherwise use default sqlite. This allows loaddata & dumpdata commands to work
# after run migrations to update remote db with existing data in default sqlite
if 'DATABASE_URL' in os.environ:
    DATABASES = {
        'default': dj_database_url.parse(os.environ.get('DATABASE_URL'))
        }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
        }
    }

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files directory (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = (os.path.join(BASE_DIR, 'static'),)

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Connect django to amazon S3 bucket to serve static files in deployment
# If aws_access variable is set to true in deployed app on heroku
if 'AWS_ACCESS' in os.environ:
    # Bucket Config keys from aws bucket
    AWS_STORAGE_BUCKET_NAME = 'cluster-bkt'
    AWS_S3_REGION_NAME = 'us-east-2'

    # Bucket Security keys added in the heroku app Config Var
    AWS_ACCESS_KEY_ID = os.environ.get('AWS_ACCESS_KEY_ID')
    AWS_SECRET_ACCESS_KEY = os.environ.get('AWS_SECRET_ACCESS_KEY')

    # Use F string to interprete and add bucket name above to get the url
    AWS_S3_CUSTOM_DOMAIN = f'{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com'

    # State destination for future Static and media files user uploaded
    STATICFILES_STORAGE = 'custom_storages.StaticStorage'
    STATICFILES_LOCATION = 'static'

    DEFAULT_FILE_STORAGE = 'custom_storages.MediaStorage'
    MEDIAFILES_LOCATION = 'media'

    # Override static and media URLs in production
    STATIC_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/{STATICFILES_LOCATION}/'
    MEDIA_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/{MEDIAFILES_LOCATION}/'


# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# For sending REAL confirmation email to register new user in Live Site
# If DEV is set to true in local env var in gitpod setting or in env.py file, use fake email
# to send confirmation link at terminal, otherwise use heroku configVar to send real email
if 'DEVELOPMENT' in os.environ:
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'  # Copied from above line
    DEFAULT_FROM_EMAIL = 'example@clusterdomain.com'  # Fake email config
else:
    EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'  # Copied from above line
    EMAIL_USE_TLS = True
    EMAIL_PORT = 587
    EMAIL_HOST = 'smtp.gmail.com'
    EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER')  # Set in heroku config var
    EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASS')  # Set in heroku config var
    DEFAULT_FROM_EMAIL = os.environ.get('EMAIL_HOST_USER')
